<!-- Quirk Stack Builder (embed widget) -->
<div id="quirk-stack-builder"></div>
<script>
(() => {
  const mount = document.getElementById('quirk-stack-builder');
  const root = (mount.attachShadow ? mount.attachShadow({mode:'open'}) : mount);

  const css = `
  :host{all:initial}
  .wrap{display:grid;grid-template-columns:1fr 380px;gap:18px;padding:18px;font-family:system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial,sans-serif;color:#0B1120}
  .card{background:#fff;border:1px solid rgba(11,17,32,.14);border-radius:0;padding:16px}
  .title{margin:28px 18px 6px;font-size:clamp(42px,7vw,88px);line-height:1;font-family:Impact,haettenschweiler,'Arial Narrow Bold',sans-serif}
  .btn{font-family:Impact,haettenschweiler,'Arial Narrow Bold',sans-serif;text-transform:uppercase;letter-spacing:2px;padding:12px 16px;border-radius:0;cursor:pointer;border:2px solid #0B1120;background:#0B1120;color:#EEE7D6;transition:.15s}
  .btn:hover{background:#1a2744;border-color:#1a2744}
  .btn:disabled{opacity:.45;cursor:not-allowed}
  .btn-ghost{background:#fff;color:#0B1120}
  .btn-ghost:hover{background:#1a2744;color:#EEE7D6}
  input{width:100%;padding:10px;border:2px solid #0B1120;border-radius:0}
  .slots{display:grid;gap:12px;grid-template-columns:repeat(5,1fr)}
  .slot{display:grid;place-items:center;min-height:92px;border:2px dashed rgba(11,17,32,.14);cursor:pointer;position:relative}
  .slot:hover{border-color:#0B1120}.slot.active{outline:3px solid #0B1120}
  .slot .label{position:absolute;top:8px;left:10px;font-size:12px;color:#3c4150}
  .slot .value{font-weight:800;text-align:center;padding:0 8px}
  .slot .clear{position:absolute;right:6px;top:6px;font-size:11px;color:#6b7280;background:transparent;border:0;cursor:pointer}
  .slot .clear:hover{color:#0B1120}
  .slot.filled{background:#0B1120;color:#EEE7D6;border-color:#0B1120}.slot.filled .label{color:#d7dce6}
  h2, h3{font-family:Impact,haettenschweiler,'Arial Narrow Bold',sans-serif;margin:8px 0 10px}
  .bar{display:grid;gap:8px;margin:10px 0 12px}
  .row{display:flex;justify-content:space-between;color:#4b5563;font-size:13px}
  progress{width:100%;height:12px;accent-color:#C85158;background:#efe9da}
  .filter{display:flex;gap:8px;flex-wrap:wrap;margin:10px 0}
  .chip{font-family:Impact,haettenschweiler,'Arial Narrow Bold',sans-serif;letter-spacing:1px;border:2px solid #0B1120;background:#fff;color:#0B1120;border-radius:0;padding:6px 12px;font-size:12px;cursor:pointer}
  .chip.active{background:#0B1120;color:#EEE7D6}
  .list{display:grid;gap:8px;max-height:52vh;overflow:auto;padding-right:6px}
  .item{display:grid;grid-template-columns:1fr auto;gap:10px;align-items:center;padding:12px;border:1px solid rgba(11,17,32,.14);background:#fff}
  .item .name{font-weight:800;color:#0B1120}.item .meta{font-size:12px;color:#6b7280}.item.disabled{opacity:.45}
  .kv{display:grid;grid-template-columns:auto 1fr;gap:6px 10px;color:#4b5563;font-size:13px}
  .status{margin:8px 0;font-weight:900}.ok{color:#1d8a58}.bad{color:#c0273a}
  .priceRow{display:flex;justify-content:space-between;padding:6px 0;border-bottom:1px dashed rgba(11,17,32,.14)}
  .total{font-size:22px;font-weight:900}
  pre{background:#f6f7f9;border:1px solid rgba(11,17,32,.14);padding:10px;white-space:pre;overflow:auto}
  `;

  const html = `
  <div class="title">CUSTOM QUIRK STACK BUILDER</div>
  <main class="wrap">
    <section class="card">
      <div style="display:grid;grid-template-columns:1fr 1fr 1fr;gap:10px;align-items:end;margin-bottom:12px">
        <div>
          <label>Custom Stack Name</label>
          <input id="stackName" placeholder="e.g., Phoenix Vanguard">
        </div>
        <div>
          <label>Minecraft Username</label>
          <input id="mcName" placeholder="optional">
        </div>
        <div>
          <label>Discord Username</label>
          <input id="discordName" placeholder="optional">
        </div>
        <div style="grid-column:1/-1;color:#6b7280;font-size:13px">Provide at least <b>one</b> contact (Minecraft or Discord).</div>
      </div>

      <div class="slots" id="slots"></div>

      <div>
        <h2>Choose an Ability <span style="font-weight:400;letter-spacing:0">(click a slot above)</span></h2>
        <div class="bar">
          <div class="row"><span>Points</span><span><span id="costNow">0</span>/<span id="costMax">20</span></span></div>
          <progress id="costBar" value="0" max="20"></progress>
          <div class="row"><span>Total Price</span><span id="cashTotal" style="font-weight:800">$0.00</span></div>
        </div>

        <div class="filter" id="quirkFilter"></div>
        <div class="list" id="abilityList"></div>
      </div>
    </section>

    <aside class="card right">
      <h3>Summary</h3>
      <div class="kv">
        <div>Points max:</div><div id="ruleBudget">20</div>
        <div>Per-quirk cap:</div><div>â‰¤30% of current stack size (min 1)</div>
      </div>
      <div id="status" class="status ok">Valid</div>
      <h3>Order</h3>
      <div class="priceRow"><span>Items</span><span id="itemCount">0</span></div>
      <div class="priceRow"><span>Subtotal</span><span id="subtotal">$0.00</span></div>
      <div class="priceRow total"><span>Total</span><span id="grand">$0.00</span></div>
      <button id="btnCheckout" class="btn" disabled>Checkout</button>

      <h3 style="margin-top:16px">Your Quirk Stack (YAML)</h3>
      <pre id="yamlPreview"></pre>
      <div style="display:flex;gap:8px;flex-wrap:wrap">
        <button class="btn" id="copyYaml">Copy YAML</button>
        <button class="btn" id="downloadYaml">Download YAML</button>
        <button class="btn" id="emailYaml">Email to Admin</button>
      </div>
    </aside>
  </main>
  `;

  const style = document.createElement('style');
  style.textContent = css;

  const container = document.createElement('div');
  container.innerHTML = html;

  root.appendChild(style);
  root.appendChild(container);

  /* -------- Data & Logic -------- */

  // (1) YAML from your stack. Parser is tolerant and filters Domain*/Maximum* and quirks with 1 ability.
  const QUIRK_YAML = `
Absorb:
  Absorb: 1
Arbor:
  WoodWhip: 1
  EmergingForest: 1
  WoodWall: 1
  WoodStrike: 3
  CuttingSprigs: 4
  WoodLasso: 5
  WoodArmor: 7
  LacquerChainPrison: 9
  DeepForestEmergence: 12
Acid:
  Acid: 1
  AcidSkate: 1
  AcidShot: 3
  AcidVeil: 5
  AcidGeiser: 7
  AcidMan: 9
Alchemy:
  CoinToss: 1
  Transmutation: 2
  WIP: 4
  HumanTransmutation: 10
Adaptation:
  Adaptation: 1
  AdaptationList: 1
AirCannon:
  AirborneDash: 1
  FocusedBlast: 2
  ShockwaveBlast: 3
  ShockwaveSlam: 4
  TornadoCannon: 5
AmpliVoice:
  LoudVoice: 1
  Screech: 5
Barrier:
  BarrierCreation: 1
  BarrierExpansion: 2
  BarrierWave: 3
  MultiLayerBarrier: 4
BlackHole:
  SingularityCore: 2
  VoidPurge: 5
  ZeroSpace: 7
  GravityImplode: 10
BlackWhip:
  BlackWhip: 1
  WhipLasso: 2
  WhipStrike: 3
BloodCurdle:
  BloodCurdle: 1
  BloodFrenzy: 2
BulletLaser:
  LaserBurst: 1
  LaserSpread: 2
  PrecisionShot: 3
  RapidFire: 4
  ReflectiveBeam: 5
Bunny:
  Bunny: 1
  LunaKick: 1
  LunaRing: 3
  LunaSmash: 5
  LunaSpinKick: 7
  Tezcatlipoca: 10
Cement:
  Fortress: 5
  ConcreteCage: 3
  HeavensPillar: 7
  Earthquake: 1
CurseMark:
  CurseEnergy: 1
  CurseActivation: 3
Clone:
  CloneCreation: 1
  CloneManage: 1
Cremation:
  Temperature: 1
  CremationFlamingCoatingArms: 1
  CremationFireball: 1
  CremationBlaze: 3
  CremationFireFlight: 5
  CremationFlamethrower: 7
  CremationHellSpider: 9
  CremationFlashfireFist: 11
  CremationProminenceBurn: 13
Decay:
  Decay: 1
  DeadGround: 5
  GlobalCatastrophe: 10
Engine:
  Rush: 1
  ReciproBurst: 5
Explosion:
  Blast: 1
  BlastJump: 2
  APShot: 5
  HowitzerImpact: 7
Electrification:
  StunGun: 1
  SuperCharge: 1
  Discharge: 3
  ElectricShield: 5
  IndiscriminateShock: 7
  Sharpshooter: 9
FierceWings:
  FierceWings: 1
  FeatherControl: 3
  FeatherVolley: 4
  HawkSlice: 5
  FeatherBlade: 7
  FalconDive: 9
Fiber:
  StyleReinforcement: 1
  FiberGrapple: 2
  ThreadLash: 5
  ThreadLead: 5
  NeedleSpool: 7
Flight:
  ExplosiveFlight: 1
  Float: 2
  FlightLesser: 3
Frog:
  FrogTongue: 1
  Invisibility: 3
  TongueSlash: 5
Gigantification:
  SizeChange: 1
  Stomp: 3
  Swat: 5
  SlideTackle: 7
Harden:
  Harden: 1
  Unbreakable: 7
Horns:
  Horns: 1
  TrackingHorn: 5
HellFlame:
  Temperature: 1
  FlamingCoatingArms: 1
  Fireball: 1
  Blaze: 3
  FireFlight: 5
  Flamethrower: 7
  HellSpider: 9
  FlashfireFist: 11
  ProminenceBurn: 13
IdleTransfiguration:
  SelfTransfiguration: 2
  Transfiguration: 4
  TrueForm: 6
  SelfEmbodimentOfPerfection: 8
Jet:
  Jet: 1
  RockedPunch: 3
  MultiStrike: 5
Kasso:
  SlideAndGlide: 1
  ClingAndClimb: 3
  Repulsion: 5
  ShootyGo: 7
  ShootyBarrierBarrage: 10
Limitless:
  Infinity: 1
  LapseBlue: 2
  ReversalRed: 6
  HollowPurple: 10
  InfinityVoid: 11
MetalManipulation:
  IronBullet: 1
  MetallicVines: 5
  IronCoffin: 7
  TitaniumFist: 11
MuscleAugmentation:
  MuscleForm: 3
OneForAllAllMight:
  PowerUp: 1
  TexasSmash: 3
  DetroitSmash: 4
  NewHampshireSmash: 5
  CaliforniaSmash: 7
  UnitedStatesOfSmash: 9
Orca:
  Orca: 1
  Sonar: 3
  Echolocation: 4
  HypersonicWave: 5
Overmodification:
  Overmodification: 3
  SelfModification: 5
Overhaul:
  Reassemble: 1
  Dissasemble: 2
  Spikes: 5
  HoningSpike: 7
PopOff:
  PopOff: 1
  GrapeBall: 1
  GrapeVine: 3
  GrapeRush: 6
  BendyBallPop: 8
Rifle:
  BulletCreation: 1
  Snipe: 1
  AwakenedRailgun: 9
Search:
  Search: 1
Shrine:
  Cleave: 2
  Dismantle: 5
  Fuga: 10
TurboGranny:
  GrannyTransform: 2
  TurboDash: 5
  AllOutDash: 10
Volcano:
  Volcano: 1
  LandmineVolcano: 3
  Eruption: 5
  CoffinOfTheIronMountainc: 9
Water:
  Spout: 1
  Torrent: 3
  Wave: 5
WeakSpot:
  WeakSpot: 1
`;

  function parseQuirkYaml(src){
    const raw = {}; let cur = null;
    for (const r of src.split(/\r?\n/)) {
      const line = r.replace(/\t/g,'  ');
      if (!line.trim()) continue;
      if (!line.startsWith(' ') && line.trim().endsWith(':')) {
        cur = line.slice(0, line.lastIndexOf(':')).trim();
        if (!cur) continue;
        raw[cur] = [];
        continue;
      }
      const m = line.match(/^\s*([^:]+):\s*([0-9]+)\s*$/);
      if (m && cur) {
        const name = m[1].trim();
        const level = parseInt(m[2].trim(),10);
        if (name.startsWith('Domain') || name.startsWith('Maximum')) continue;
        raw[cur].push({ name, level: Number.isFinite(level)?level:1 });
      }
    }
    for (const k of Object.keys(raw)) if (raw[k].length < 2) delete raw[k];
    return raw;
  }

  // Points: base from level, +1/2 bump, then +1 more to everything (per your last change)
  function baseCost(level){ if(level<=2) return 2; if(level<=4) return 3; if(level<=6) return 4; if(level<=8) return 5; if(level<=10) return 6; if(level<=12) return 7; return 8; }
  function bumpedCost(level){ const add = level<=6 ? 1 : 2; return baseCost(level)+add+1; }
  function priceFromCost(cost){
    const baseCents = cost*100+99;
    const raisedDollars = Math.round((baseCents/100)*1.25);
    return raisedDollars*100 + 99; // force .99
  }

  const QUIRK_MAP = parseQuirkYaml(QUIRK_YAML);
  const QUIRKS = Object.keys(QUIRK_MAP).map(q => ({ id:q.toLowerCase(), name:q }));
  const ABILITIES = [];
  for (const [qName, entries] of Object.entries(QUIRK_MAP)) {
    for (const {name, level} of entries) {
      const id = (qName+'_'+name).toLowerCase();
      const cost = bumpedCost(level);
      ABILITIES.push({ id, name, quirkId:qName.toLowerCase(), level, cost, priceCents: priceFromCost(cost) });
    }
  }

  // ---- Builder state/helpers
  const SLOT_COUNT = 5;
  const slots = new Array(SLOT_COUNT).fill(null);
  let activeSlot = 0, quirkFilter = "all";
  const money = c => `$${(c/100).toFixed(2)}`;
  const costOf = id => ABILITIES.find(a=>a.id===id)?.cost??0;
  const priceOf = id => ABILITIES.find(a=>a.id===id)?.priceCents??0;
  const levelOf = id => ABILITIES.find(a=>a.id===id)?.level??1;
  const nameOf = id => ABILITIES.find(a=>a.id===id)?.name??id;
  const quirkById = Object.fromEntries(QUIRKS.map(q=>[q.id,q.name]));
  const totalPoints = (arr=slots)=>arr.filter(Boolean).reduce((s,id)=>s+costOf(id),0);
  const subtotalCents = (arr=slots)=>arr.filter(Boolean).reduce((s,id)=>s+priceOf(id),0);
  const countsByQuirk = (arr=slots)=>arr.reduce((m,id)=>{ if(!id) return m; const q=ABILITIES.find(a=>a.id===id)?.quirkId; m[q]=(m[q]||0)+1; return m; },{});
  const capForQuirk = (qid,cand)=>Math.max(1, Math.floor(0.30 * (cand.filter(Boolean).length || SLOT_COUNT)));
  function canPlace(slotIndex, abilityId){
    const next = slots.slice(); next[slotIndex]=abilityId;
    if (totalPoints(next) > 20) return {allowed:false,reason:"BUDGET"};
    const qid = ABILITIES.find(a=>a.id===abilityId)?.quirkId;
    const c = (countsByQuirk(next)[qid]||0), cap = capForQuirk(qid,next);
    if (c>cap) return {allowed:false,reason:"CAP"};
    for (let i=0;i<SLOT_COUNT;i++) if (i!==slotIndex && slots[i]===abilityId) return {allowed:false,reason:"DUP"};
    return {allowed:true};
  }
  const nextEmptySlot = from => {
    for(let i=from+1;i<SLOT_COUNT;i++) if(!slots[i]) return i;
    for(let i=0;i<from;i++) if(!slots[i]) return i;
    return from;
  };

  // ---- DOM refs inside shadow
  const $ = s => root.querySelector(s);
  const slotsEl = $('#slots');
  const abilityListEl = $('#abilityList');
  const quirkFilterEl = $('#quirkFilter');
  const costBarEl = $('#costBar');
  const costNowEl = $('#costNow');
  const cashTotalEl = $('#cashTotal');
  const statusEl = $('#status');
  const itemCountEl = $('#itemCount');
  const subtotalEl = $('#subtotal');
  const grandEl = $('#grand');
  const btnCheckout = $('#btnCheckout');
  const stackName = $('#stackName');
  const mcName = $('#mcName');
  const discordName = $('#discordName');
  const yamlPreview = $('#yamlPreview');
  $('#costMax').textContent = 20; costBarEl.max = 20;

  // ---- Renderers
  function renderQuirkFilter(){
    quirkFilterEl.innerHTML='';
    const add=(id,label)=>{
      const b=document.createElement('button');
      b.type='button'; b.className='chip'+(quirkFilter===id?' active':''); b.textContent=label;
      b.onclick=()=>{ quirkFilter=id; renderAbilityList(); };
      quirkFilterEl.appendChild(b);
    };
    add('all','All');
    for(const q of QUIRKS) add(q.id,q.name);
  }
  function renderSlots(){
    slotsEl.innerHTML='';
    for(let i=0;i<SLOT_COUNT;i++){
      const id=slots[i], a=ABILITIES.find(x=>x.id===id);
      const div=document.createElement('div');
      div.className='slot'+(a?' filled':'')+(i===activeSlot?' active':'');
      div.innerHTML = '<div class="label">Slot '+(i+1)+'</div><div class="value">'+(a?`${a.name} (${a.cost} pts Â· ${money(a.priceCents)})`:'â€” empty â€”')+'</div>';
      if(a){
        const clear=document.createElement('button'); clear.className='clear'; clear.textContent='remove';
        clear.onclick=e=>{e.stopPropagation(); slots[i]=null; activeSlot=i; renderAll();};
        div.appendChild(clear);
      }
      div.onclick=()=>{ activeSlot=i; renderAll(); };
      slotsEl.appendChild(div);
    }
  }
  function renderAbilityList(){
    abilityListEl.innerHTML='';
    const list=ABILITIES.filter(a=>quirkFilter==='all'||a.quirkId===quirkFilter);
    for(const a of list){
      const res=canPlace(activeSlot,a.id);
      const row=document.createElement('div'); row.className='item'+(res.allowed?'':' disabled');
      const left=document.createElement('div'); left.innerHTML=`<div class="name">${a.name}</div><div class="meta">${quirkById[a.quirkId]} Â· ${a.cost} pts Â· $${(a.priceCents/100).toFixed(2)}</div>`;
      const btn=document.createElement('button'); btn.className='btn'; btn.textContent=res.allowed?'Select':(res.reason==='BUDGET'?'No Points':res.reason==='CAP'?'Quirk Cap':'Duplicate');
      if(res.allowed) btn.onclick=()=>{ slots[activeSlot]=a.id; activeSlot=nextEmptySlot(activeSlot); renderAll(); };
      row.append(left,btn); abilityListEl.appendChild(row);
    }
  }
  function buildYaml(){
    const name=(stackName.value||'Unnamed Stack').trim();
    const items=slots.filter(Boolean).map(id=>({ ability:nameOf(id), level:levelOf(id) }));
    let y = `${name}:\n`; for(const it of items) y += `  ${it.ability}: ${it.level}\n`;
    y += `# contact:\n#   minecraft: ${(mcName.value||'(none)').trim()}\n#   discord: ${(discordName.value||'(none)').trim()}\n`;
    return y;
  }
  function renderSummary(){
    const pts = slots.filter(Boolean).reduce((s,id)=>s+costOf(id),0);
    costNowEl.textContent = String(pts); costBarEl.value = pts;
    const items = slots.filter(Boolean);
    const sub = items.reduce((s,id)=>s+priceOf(id),0);
    itemCountEl.textContent = String(items.length);
    subtotalEl.textContent = `$${(sub/100).toFixed(2)}`;
    grandEl.textContent = `$${(sub/100).toFixed(2)}`;
    cashTotalEl.textContent = `$${(sub/100).toFixed(2)}`;

    const counts = countsByQuirk();
    const overCap = Object.entries(counts).some(([qid,n]) => n > capForQuirk(qid, slots));
    const contactOK = (mcName.value.trim().length>0) || (discordName.value.trim().length>0);
    const nameOK = stackName.value.trim().length>0;
    const ok = pts<=20 && !overCap && items.length>0 && contactOK && nameOK;
    statusEl.textContent = ok ? 'Valid' : 'Invalid (rules + contact + name)';
    statusEl.className = 'status ' + (ok?'ok':'bad');
    btnCheckout.disabled = !ok;

    yamlPreview.textContent = buildYaml();
  }
  function renderAll(){ renderSlots(); renderQuirkFilter(); renderAbilityList(); renderSummary(); }

  // Actions
  root.getElementById?.bind(root);
  root.querySelector('#copyYaml').onclick = async () => {
    try{ await navigator.clipboard.writeText(buildYaml()); root.querySelector('#copyYaml').textContent='Copied!'; setTimeout(()=>root.querySelector('#copyYaml').textContent='Copy YAML',1200);}catch{}
  };
  root.querySelector('#downloadYaml').onclick = () => {
    const blob = new Blob([buildYaml()], {type:'text/plain'});
    const a = document.createElement('a');
    a.href = URL.createObjectURL(blob);
    const safe=(stackName.value||'quirk_stack').replace(/[^\w\-]+/g,'_');
    a.download = `${safe}.yml`; a.click();
  };
  root.querySelector('#emailYaml').onclick = () => {
    const subject = encodeURIComponent(`Custom Quirk Stack Submission â€” ${(stackName.value||'Unnamed Stack').trim()}`);
    const body = encodeURIComponent(buildYaml() + `\nâ€” Sent from the Quirk Stack Builder`);
    window.location.href = `mailto:dynamizt@myherounbound.com?subject=${subject}&body=${body}`;
  };

  root.addEventListener('input', (e)=> {
    if (['stackName','mcName','discordName'].includes(e.target.id)) renderSummary();
  });

  renderAll();
})();
</script>
<!-- /Quirk Stack Builder -->
